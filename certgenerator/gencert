#!/bin/bash
# This file generates the keys and certificates used for testing mosquitto.
# None of the keys are encrypted, so do not just use this script to generate
# files for your own use.
set -x
OPTS=`getopt -o hc:s:r:S: --long server:,help,client:,rootca:,enable-server: -n 'parse-options' -- "$@"`

if [ $? != 0 ] ; then echo "Failed parsing options." >&2 ; exit 1 ; fi

#echo "$OPTS"
eval set -- "$OPTS"

HELP=false

while true; do
  case "$1" in
    -v | --verbose ) VERBOSE=true; shift ;;
    -h | --help )    HELP=true; shift ;;
    -c | --client ) client_arg=$2; shift ; shift ;;
    -s | --server ) server_arg="$2"; shift; shift ;;
    -r | --rootca ) rootca_arg="$2"; shift; shift ;;
    -S | --enable-server ) serverca_arg="$2"; shift; shift ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

help()
{

echo " ./gencert.sh -c <client hostname/ip> -s <mqttbroker hostname/ip> -S <enable server cert generation> --rootca <enable server cert generation>"
echo " The certificates are generated in the results folder"
}

if [ $HELP = true ]; then
	help
	exit
fi

if [ -z "${server_arg// }" ] || [ -z "${client_arg// }" ]  || [ -z "${rootca_arg// }" ] || [ -z "${serverca_arg// }" ]; then
	echo "empty server or client or rootca"
	exit
fi

#rm -rf *.crt *.csr *.key rootCA/ signingCA/ *.pem

for a in root signing; do
	rm -rf ${a}CA/
	mkdir -p ${a}CA/newcerts
	touch ${a}CA/index.txt
	echo 01 > ${a}CA/serial
	echo 01 > ${a}CA/crlnumber
done
#rm -rf results
mkdir -p results/{${server_arg},${client_arg}}

BASESUBJ="/C=GB/ST=Derbyshire/L=Derby/O=Mosquitto Project/OU=Testing"
SBASESUBJ="/C=GB/ST=Nottinghamshire/L=Nottingham/O=Server/OU=Production"

if  [ "${rootca_arg}" == "1" ]; then
	echo "root ca is set"
	# The root CA
	openssl genrsa -out test-root-ca.key 1024
	openssl req -new -x509 -days 3650 -key test-root-ca.key -out test-root-ca.crt -config openssl.cnf -subj "${BASESUBJ}/CN=Root CA/"
	# An intermediate CA, signed by the root CA, used to sign server/client csrs.
	yes | openssl genrsa -out test-signing-ca.key 1024
	openssl req -out test-signing-ca.csr -key test-signing-ca.key -new -config openssl.cnf -subj "${BASESUBJ}/CN=Signing CA/"
	yes | openssl ca -config openssl.cnf -name CA_root -extensions v3_ca -out test-signing-ca.crt -infiles test-signing-ca.csr
	cat test-signing-ca.crt test-root-ca.crt > all-ca.crt
fi

if  [ "${serverca_arg}" == "1" ]; then
	echo "server certificate is set"
	# Valid server key and certificate.
	openssl genrsa -out ${server_arg}.key 1024
	openssl req -new -key ${server_arg}.key -out ${server_arg}.csr -config openssl.cnf -subj "${SBASESUBJ}/CN=${server_arg}/"
	yes | openssl ca -config openssl.cnf -name CA_signing -out ${server_arg}.crt -infiles ${server_arg}.csr

	cp all-ca.crt ${server_arg}.key ${server_arg}.crt results/${server_arg}
fi

# Valid client key and certificate.
openssl genrsa -out ${client_arg}.key 1024
openssl req -new -key ${client_arg}.key -out ${client_arg}.csr -config openssl.cnf -subj "${SBASESUBJ}/CN=${client_arg}/"
yes | openssl ca -config openssl.cnf -name CA_signing -out ${client_arg}.crt -infiles ${client_arg}.csr

cat ${client_arg}.crt ${client_arg}.key all-ca.crt > ${client_arg}.pem

cp all-ca.crt ${client_arg}.key ${client_arg}.crt results/${client_arg}

#rm -rf rootCA signingCA
